Index: src/dashboard/screens/BookingController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dashboard.screens;\r\n\r\nimport com.jfoenix.controls.JFXComboBox;\r\nimport com.jfoenix.controls.JFXDatePicker;\r\nimport com.jfoenix.controls.JFXTextField;\r\nimport com.jfoenix.controls.JFXTimePicker;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.ListView;\r\nimport javafx.scene.layout.BorderPane;\r\nimport util.StageHandler;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class BookingController implements Initializable {\r\n    \r\n    @FXML\r\n    private BorderPane pane;\r\n    @FXML\r\n    private JFXTextField Id;\r\n    @FXML\r\n    private JFXTextField durationField;\r\n    @FXML\r\n    private JFXComboBox<String> hallNo;\r\n    @FXML\r\n    private JFXTimePicker eventStartTime;\r\n    @FXML\r\n    private JFXTimePicker eventEndTime;\r\n    @FXML\r\n    private JFXDatePicker eventDate;\r\n    @FXML\r\n    private JFXTextField noOfPersons;\r\n    @FXML\r\n    private Label MessageLabelOfEventSaved;\r\n    @FXML\r\n    private JFXComboBox<String> eventType;\r\n    \r\n    ///////////////Customer Detail////\r\n    \r\n    @FXML\r\n    private JFXTextField nameOfCustomer;\r\n    @FXML\r\n    private JFXTextField phoneOfCustomer;\r\n    @FXML\r\n    private JFXTextField emailOfCustomer;\r\n    @FXML\r\n    private JFXTextField customerAddress;\r\n    \r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        ObservableList<String> list = FXCollections.observableArrayList(\"Wedding\", \"Seminar\", \"Party\", \"Other\", \"Mehfill\");\r\n        eventType.setItems(list);\r\n        \r\n        ObservableList<String> list1 = FXCollections.observableArrayList(\"Hall 1 (MaxCap 500)\", \"Hall 2 (MaxCap 300)\", \"Hall 3 (MaxCap 700)\");\r\n        hallNo.setItems(list1);\r\n    \r\n    }\r\n    \r\n    public void onCheck(ActionEvent actionEvent) {\r\n        String fxmlPath = \"/dashboard/screens/BookingSearch.fxml\";\r\n        String title = \"Booking Availability\";\r\n        StageHandler.createStage(fxmlPath, title);\r\n    }\r\n    \r\n    public void onNext(ActionEvent actionEvent) throws IOException {\r\n        bookingDetail();\r\n        nextFxml();\r\n    }\r\n    \r\n    public void bookingDetail() {\r\n        \r\n        /// todo  implementation if empty query not run\r\n//        try {\r\n//\r\n//            String query = String.format(\"Insert Into Event_Booking( EventType, EventStartTime,EventDate ,NoOfPerson, NameOfCustomer, PhoneNoOfCustomer, EmailOfCustomer,EventEndingTime, HallNo, INVOICENO) Values ('%s', to_date('2020-12-12 %s',  'yyyy-mm-dd hh24:mi:ss'), to_date('%s','yyyy-mm-dd'), '%s', '%s', '%s', '%s',to_date('2020-12-12 %s',  'yyyy-mm-dd hh24:mi:ss'), '%s', %d )\",\r\n//                    event_type_box.getValue(),\r\n//                    event_time.getValue(),\r\n//                    event_date.getValue(),\r\n//                    no_of_persons.getText(),\r\n//                    name_of_customer.getText(),\r\n//                    phone_no_of_customer.getText(),\r\n//                    email_of_customer.getText(),\r\n//                    event_ending_time.getValue(),\r\n//                    hall_no.getValue(),\r\n//                    Integer.parseInt(invoiceNoTxT.getText()));\r\n//\r\n//            DBService.statement.executeUpdate(query);\r\n//            MessageLabelOfEventSaved.setText(\"Saved!\");\r\n//        clearFields();\r\n//        } catch (SQLException throwables) {\r\n//            throwables.printStackTrace();\r\n//        }\r\n    }\r\n    \r\n    private void nextFxml() throws IOException {\r\n\r\n        String fxmlPath = \"/dashboard/screens/Customer.fxml\";\r\n        String title = \"Booking Availability\";\r\n        StageHandler.createStage(fxmlPath, title);\r\n    }\r\n    \r\n    public void clearFields() {\r\n        \r\n        hallNo.setValue(null);\r\n        eventType.setValue(null);\r\n        eventStartTime.setValue(null);\r\n        eventDate.setValue(null);\r\n        eventEndTime.setValue(null);\r\n        noOfPersons.clear();\r\n//        nameOfCustomer.clear();\r\n        phoneOfCustomer.clear();\r\n        emailOfCustomer.clear();\r\n        customerAddress.setText(null);\r\n    }\r\n    \r\n    public void onCheck(ActionEvent event) {\r\n    }\r\n    \r\n    public void onNext(ActionEvent event) {\r\n    \r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/dashboard/screens/BookingController.java b/src/dashboard/screens/BookingController.java
--- a/src/dashboard/screens/BookingController.java	(revision 64fb5af7b297a04b50679c11452ef98722157e63)
+++ b/src/dashboard/screens/BookingController.java	(date 1608910631404)
@@ -119,10 +119,9 @@
         customerAddress.setText(null);
     }
     
-    public void onCheck(ActionEvent event) {
-    }
-    
-    public void onNext(ActionEvent event) {
-    
+    public void onTeam(ActionEvent actionEvent) {
+        String fxmlPath = "/dashboard/screens/team.fxml";
+        String title = "Add Team";
+        StageHandler.createStage(fxmlPath, title);
     }
 }
Index: src/login/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package login;\r\n\r\nimport com.jfoenix.controls.JFXPasswordField;\r\nimport com.jfoenix.controls.JFXTextField;\r\nimport database.DBService;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Label;\r\nimport util.StageHandler;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\npublic class LoginController {\r\n    @FXML\r\n    private JFXTextField username_field;\r\n    @FXML\r\n    private JFXPasswordField password_field;\r\n    @FXML\r\n    private Label loginMessage_label;\r\n    \r\n    @FXML\r\n    private void login() {\r\n        String username = username_field.getText();\r\n        String password = password_field.getText();\r\n        if (username.isBlank() || password.isBlank())\r\n            loginMessage_label.setText(\"Please Enter Username and Password!\");\r\n        else if (exists(username, password)) {\r\n            String fxmlPath = \"/dashboard/Dashboard.fxml\";\r\n            String title = \"Dashboard Of Hall Management System\";\r\n            StageHandler.createStage(fxmlPath, title).show();\r\n        } else loginMessage_label.setText(\"Username or Password Incorrect!\");\r\n    }\r\n    \r\n    private boolean exists(String username, String password) {\r\n        String query = String.format(\"Select * From SignUp Where username='%s' AND password='%s'\", username, password);\r\n        ResultSet rs = DBService.executeQuery(query);\r\n        try {\r\n            return rs.next();\r\n        } catch (SQLException sqlException) {\r\n            System.out.println(sqlException.getMessage());\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    @FXML\r\n    private void forgetPassword() {\r\n        String fxmlPath = \"/login/ForgetPassword.fxml\";\r\n        String title = \"Forget Password\";\r\n        StageHandler.createStage(fxmlPath, title).show();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/login/LoginController.java b/src/login/LoginController.java
--- a/src/login/LoginController.java	(revision 64fb5af7b297a04b50679c11452ef98722157e63)
+++ b/src/login/LoginController.java	(date 1608842293305)
@@ -2,9 +2,11 @@
 
 import com.jfoenix.controls.JFXPasswordField;
 import com.jfoenix.controls.JFXTextField;
+import dashboard.DashboardController;
 import database.DBService;
 import javafx.fxml.FXML;
 import javafx.scene.control.Label;
+import javafx.stage.Stage;
 import util.StageHandler;
 
 import java.sql.ResultSet;
@@ -28,6 +30,7 @@
             String fxmlPath = "/dashboard/Dashboard.fxml";
             String title = "Dashboard Of Hall Management System";
             StageHandler.createStage(fxmlPath, title).show();
+            DashboardController con = StageHandler.loader.getController();
         } else loginMessage_label.setText("Username or Password Incorrect!");
     }
     
Index: src/database/DBService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package database;\r\n\r\nimport org.h2.tools.Server;\r\n\r\nimport java.sql.*;\r\n\r\npublic class DBService {\r\n    private static Connection connection;\r\n    public static Statement statement;\r\n    \r\n    private DBService() {\r\n    }\r\n    \r\n    public static void createConnection() {\r\n        String port = \"9092\";\r\n        startTCPServer(port);\r\n        try {\r\n            Class.forName(\"org.h2.Driver\");\r\n            String url = String.format(\"jdbc:h2:tcp://localhost:%s/./HMS\", port);\r\n            connection = DriverManager.getConnection(url);\r\n            statement = connection.createStatement();\r\n        } catch (ClassNotFoundException | SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n    \r\n    private static void startTCPServer(String port) {\r\n        try {\r\n            String[] params = {\"-tcpPort\", port, \"-ifExists\", \"-baseDir\", \"./src/database/h2/\"};\r\n            Server server = Server.createTcpServer(params).start();\r\n            System.out.println(server.getStatus());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    \r\n    public static ResultSet executeQuery(String query) {\r\n        ResultSet resultSet = null;\r\n        try {\r\n            resultSet = statement.executeQuery(query);\r\n        } catch (SQLException sqlException) {\r\n            System.out.println(sqlException.getMessage());\r\n        }\r\n        return resultSet;\r\n    }\r\n    \r\n    public static int executeUpdate(String query) {\r\n        int rowsUpdated = 0;\r\n        try {\r\n            rowsUpdated = statement.executeUpdate(query);\r\n        } catch (SQLException sqlException) {\r\n            System.out.println(sqlException.getMessage());\r\n        }\r\n        return rowsUpdated;\r\n    }\r\n    \r\n    public static void close() throws SQLException {\r\n        if (!connection.isClosed())\r\n            connection.close();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/database/DBService.java b/src/database/DBService.java
--- a/src/database/DBService.java	(revision 64fb5af7b297a04b50679c11452ef98722157e63)
+++ b/src/database/DBService.java	(date 1608848464553)
@@ -11,8 +11,8 @@
     private DBService() {
     }
     
-    public static void createConnection() {
-        String port = "9092";
+    public static void createConnection(){
+        String port = "9095";
         startTCPServer(port);
         try {
             Class.forName("org.h2.Driver");
