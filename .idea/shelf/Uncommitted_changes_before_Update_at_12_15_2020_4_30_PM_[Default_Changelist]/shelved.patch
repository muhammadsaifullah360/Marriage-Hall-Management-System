Index: src/dashboard/screens/EmployeeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dashboard.screens;\r\n\r\nimport dashboard.screens.employeeOperations.OperationsController;\r\nimport database.DBService;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.collections.transformation.FilteredList;\r\nimport javafx.collections.transformation.SortedList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport util.StageHandler;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\npublic class EmployeeController {\r\n    \r\n    static ObservableList<Employee> employee_list = FXCollections.observableArrayList();\r\n    \r\n    @FXML\r\n    private TextField searchField;\r\n    @FXML\r\n    private TableView<Employee> employee_table;\r\n    @FXML\r\n    private TableColumn<Employee, Integer> id_col;\r\n    @FXML\r\n    private TableColumn<Employee, String> Fname_col;\r\n    @FXML\r\n    private TableColumn<Employee, String> Lname_col;\r\n    @FXML\r\n    private TableColumn<Employee, String> cnic_col;\r\n    @FXML\r\n    private TableColumn<Employee, String> type_col;\r\n    @FXML\r\n    private TableColumn<Employee, Integer> salary_col;\r\n    @FXML\r\n    private TableColumn<Employee, String> address_col;\r\n    \r\n    public void initialize() {\r\n        createTable();\r\n        createSearchFilter();\r\n        getData();\r\n    }\r\n    \r\n    private void createTable() {\r\n        id_col.setCellValueFactory(new PropertyValueFactory<>(\"id\"));\r\n        Fname_col.setCellValueFactory(new PropertyValueFactory<>(\"firstName\"));\r\n        Lname_col.setCellValueFactory(new PropertyValueFactory<>(\"lastName\"));\r\n        cnic_col.setCellValueFactory(new PropertyValueFactory<>(\"cnic\"));\r\n//        type_col.setCellValueFactory(new PropertyValueFactory<>(\"type\"));\r\n//        salary_col.setCellValueFactory(new PropertyValueFactory<>(\"salary\"));\r\n//        address_col.setCellValueFactory(new PropertyValueFactory<>(\"address\"));\r\n        employee_table.setItems(employee_list);\r\n    }\r\n    \r\n    private void createSearchFilter() {\r\n        FilteredList<Employee> filteredData = new FilteredList<>(employee_list, b -> true);\r\n        searchField.textProperty().addListener((observable, oldValue, newValue) -> {\r\n            filteredData.setPredicate(Employee -> {\r\n                if (newValue == null || newValue.isEmpty()) {\r\n                    return true;\r\n                }\r\n                String lowerCaseFilter = newValue.toLowerCase();\r\n                boolean matchFirstName = Employee.getFirstName().toLowerCase().contains(lowerCaseFilter);\r\n                boolean matchCNIC = Employee.getCnic().toLowerCase().contains(lowerCaseFilter);\r\n                boolean matchLastName = Employee.getLastName().toLowerCase().contains(lowerCaseFilter);\r\n                boolean matchID = false;\r\n                if (newValue.matches(\"\\\\d*\"))\r\n                    matchID = Employee.getId() == Integer.parseInt(newValue.toLowerCase());\r\n                return matchFirstName || matchLastName || matchCNIC || matchID;\r\n            });\r\n        });\r\n        \r\n        SortedList<Employee> sortedData = new SortedList<>(filteredData);\r\n        sortedData.comparatorProperty().bind(employee_table.comparatorProperty());\r\n        employee_table.setItems(sortedData);\r\n    }\r\n    \r\n    public static void getData() {\r\n        employee_list.clear();\r\n        String query = \"Select ID, First_Name ,Last_Name,Father_Name, Emr_Name, Cnic, Age, to_char( DOB,'yyyy-mm-dd') as dob , Nationality from EMP_BASIC_DETAIL\";\r\n        ResultSet rs = DBService.executeQuery(query);\r\n        try {\r\n            while (rs.next()) {\r\n                employee_list.add(new Employee(Integer.parseInt(String.valueOf(rs.getInt(\"ID\"))),\r\n                        rs.getString(\"First_Name\"),\r\n                        rs.getString(\"Last_Name\"),\r\n                        rs.getString(\"Father_Name\"),\r\n                        rs.getString(\"Emr_Name\"),\r\n                        rs.getString(\"Cnic\"),\r\n                        rs.getString(\"Age\"),\r\n                        rs.getString(\"Dob\"),\r\n                        rs.getString(\"Nationality\")\r\n                ));\r\n            }\r\n        } catch (SQLException exception) {\r\n            exception.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    public void add(ActionEvent event) throws IOException {\r\n        \r\n        String fxmlPath = \"/dashboard/screens/employeeOperations/EmpOperations.fxml\";\r\n        String title = \"Add Employee\";\r\n        StageHandler.createStage(fxmlPath, title);\r\n    }\r\n    \r\n    public void update(ActionEvent event) throws IOException, SQLException {\r\n        \r\n        String fxmlPath = \"/dashboard/screens/employeeOperations/EmpOperations.fxml\";\r\n        String title = \"Update Employee\";\r\n        StageHandler.createStage(fxmlPath, title);\r\n        OperationsController controller = StageHandler.loader.getController();\r\n        controller.initData(employee_table.getSelectionModel().getSelectedItem());\r\n    }\r\n    \r\n    public void delete(ActionEvent event) throws SQLException, IOException {\r\n//        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/dashboard/screens/employeeOperations/View_Employee.fxml\"));\r\n//        Parent root1 = fxmlLoader.load();\r\n//        OperationsController controller = fxmlLoader.getController();\r\n//        controller.initData(employee_table.getSelectionModel().getSelectedItem());\r\n//        Stage stage = new Stage();\r\n//        stage.setTitle(\"Delete Employee Details\");\r\n//        stage.setScene(new Scene(root1));\r\n//        stage.show();\r\n        String fxmlPath = \"/dashboard/screens/employeeOperations/View_Employee.fxml\";\r\n        String title = \"Delete Employee Details\";\r\n        StageHandler.createStage(fxmlPath, title);\r\n        OperationsController controller = StageHandler.loader.getController();\r\n        controller.initData(employee_table.getSelectionModel().getSelectedItem());\r\n    }\r\n    \r\n    public void view(ActionEvent actionEvent) throws IOException, SQLException {\r\n        String fxmlPath = \"/dashboard/screens/employeeOperations/View_Employee.fxml\";\r\n        String title = \"View Employee Details\";\r\n        StageHandler.createStage(fxmlPath, title);\r\n        OperationsController controller = StageHandler.loader.getController();\r\n        controller.initData(employee_table.getSelectionModel().getSelectedItem());\r\n    }\r\n    \r\n    public void SearchClearBtn(ActionEvent actionEvent) {\r\n        searchField.clear();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/dashboard/screens/EmployeeController.java b/src/dashboard/screens/EmployeeController.java
--- a/src/dashboard/screens/EmployeeController.java	(revision d6eccb8a8ae64b0cd620ede99b74f05d2f41dd9a)
+++ b/src/dashboard/screens/EmployeeController.java	(date 1608031845256)
@@ -13,7 +13,6 @@
 import javafx.scene.control.TextField;
 import javafx.scene.control.cell.PropertyValueFactory;
 import util.StageHandler;
-
 import java.io.IOException;
 import java.sql.ResultSet;
 import java.sql.SQLException;
